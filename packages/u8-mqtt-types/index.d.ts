/** Declaration file generated by dts-gen */

declare module "u8-mqtt" {
  class TopicRouter {
    count(topic_route: string): number;
  }

  export class MQTTBase {
    constructor(...args: any[]);

    router: TopicRouter;

    auth(...args: any[]): void;

    connect(...args: any[]): void;

    disconnect(...args: any[]): void;

    obj_post(...args: any[]): void;

    obj_send(...args: any[]): void;

    obj_store(...args: any[]): void;

    ping(...args: any[]): void;

    post(...args: any[]): void;

    pub(...args: any[]): void;

    puback(...args: any[]): void;

    send(...args: any[]): void;

    store(...args: any[]): void;

    subscribe(...args: any[]): void;

    unsubscribe(...args: any[]): void;
  }

  export class MQTTClient_v4 extends MQTTCore {
    constructor(...args: any[]);

    on_sub(...args: any[]): void;

    on_topic(...args: any[]): void;

    subs_settled(...args: any[]): void;

    subscribe_topic(...args: any[]): void;

    unsubscribe_topic(...args: any[]): void;

    static mqtt_ctx(...args: any[]): void;
  }

  export class MQTTClient_v5 extends MQTTCore {
    constructor(...args: any[]);

    on_sub(...args: any[]): void;

    on_topic(...args: any[]): void;

    subs_settled(...args: any[]): void;

    subscribe_topic(...args: any[]): void;

    unsubscribe_topic(...args: any[]): void;

    static mqtt_ctx(...args: any[]): void;
  }

  export class MQTTCore extends MQTTBase {
    constructor(...args: any[]);

    conn_emit(...args: any[]): void;

    delay(...args: any[]): void;

    init_client_id(...args: any[]): void;

    log_conn(...args: any[]): void;

    on_disconnect(...args: any[]): void;

    on_error(...args: any[]): void;

    on_live(...args: any[]): void;

    with(...args: any[]): void;

    with_async_iter(...args: any[]): void;

    with_autoreconnect(...args: any[]): void;

    with_stream(...args: any[]): void;

    with_tcp(...args: any[]): void;

    with_tls(...args: any[]): void;

    with_websock(...args: any[]): void;

    static mqtt_ctx(...args: any[]): void;
  }

  export const version: string;

  export function MQTTError(...args: any[]): void;

  export function as_topic_path(topic_route: any, id: any): void;

  export function mqtt_v4(opt: any): MQTTClient_v4;

  export function mqtt_v5(opt: any): MQTTClient_v5;

  export function with_topic_path_router(MQTTKlass: any): any;

  export function with_topic_router(mqtt_topic_router: any): any;

  export namespace MQTTError {
    const stackTraceLimit: number;

    function captureStackTrace(p0: any, p1: any): any;

    function prepareStackTrace(error: any, trace: any): any;
  }
}
